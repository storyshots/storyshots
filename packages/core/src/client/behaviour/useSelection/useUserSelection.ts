import { DeviceName, ScreenshotName, StoryID } from '@core';
import { isNil } from '@lib';
import { useMemo } from 'react';
import { useTypedQSPRoxy } from '../useTypedQSPRoxy';

/**
 * Data which is generated by the user events $user: BehaviourSubject<UserSelection>.
 *
 * Might be invalid due to the fact that this data is persisted between rebuilds.
 */
export function useUserSelection() {
  const qs = useTypedQSPRoxy();

  return {
    selection: useSelection(),
    setStory: (id: StoryID) =>
      qs.set('selection', {
        type: 'story',
        id,
        selectedAt: Date.now(),
      }),
    setRecords: (id: StoryID, at: DeviceName) =>
      qs.set('selection', { type: 'records', id, device: at }),
    setScreenshot: (id: StoryID, name: ScreenshotName, at: DeviceName) =>
      qs.set('selection', { type: 'screenshot', id, name, device: at }),
  };

  function useSelection() {
    const selection = qs.get('selection');

    return useMemo((): UserSelection => {
      if (isNil(selection)) {
        return { type: 'no-selection' };
      }

      return selection;
    }, [JSON.stringify(selection)]);
  }
}

declare global {
  interface QSStorage {
    selection: UserSelection;
  }
}

export type UserSelection =
  | {
      type: 'no-selection';
    }
  | { type: 'story'; id: StoryID; selectedAt: number }
  | {
      type: 'records';
      id: StoryID;
      device: DeviceName;
    }
  | {
      type: 'screenshot';
      id: StoryID;
      name: ScreenshotName;
      device: DeviceName;
    };
